---
  - name: Run Python virtual environment provisioner
    hosts: 
      - "ansible-sandbox"
      - "localhost"
    become: true
    vars:
      workspace: "/opt/python_venvs"
      backstage: "/tmp"

    tasks:
      # Install dependencies
      - name: Install pip
        package:
          name: 'python3-pip'

      - name: Install virtualenv
        package: 
          name: python3-venv


      # Prepare environment
      - name: Copy required data
        copy:
          src: ../src/envs
          dest: "{{ backstage }}"

      - name: Find txt files
        find:
          paths: "/{{ backstage }}/envs"
          patterns: "*.txt"
        register: reg_requirement_files


      # Prepare output folder
      - name: Create a new directory www at given path recursively
        file:
          path: "{{ workspace }}"
          state: directory
          mode: '0755'
          recurse: yes


      # Handling venvs logic
      - name: Fetch existing venv
        find:
          paths: "{{ workspace }}"
          recurse: no
          file_type: directory
        register: reg_existing_venv

      - name: Extract existing venv names to use for venv existance check
        set_fact:
          reg_existing_venv_names: "{{ reg_existing_venv_names | default([]) + [item.path | basename | split('.') | first] }}"
        with_items: "{{ reg_existing_venv.files | default([]) }}"

      - name: Creating Virtual Environments if not exist
        shell: "python3 -m venv {{ workspace }}/{{ item.path | basename | split('.') | first }}"  
        with_items: "{{ reg_requirement_files.files }}"
        when: "item.path|basename|split('.')|first not in reg_existing_venv_names| default([])"

      - name: Activating Virtual Environments if not exist
        shell: |
          source ./bin/activate
          pip install -r /{{ backstage }}/envs/{{ item.path | basename | split('.') | first }}.txt
        args:
           executable: /bin/bash
           chdir: "{{ workspace }}/{{ item.path | basename | split('.') | first}}"
        with_items: "{{ reg_requirement_files.files }}"
        when: "item.path|basename|split('.')|first not in reg_existing_venv_names| default([])"
